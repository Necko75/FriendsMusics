
var Tchat = require('models/tchat/tchat_class.js');
var User = require('models/user_class.js');
var U = new User();
var session_brute;

var S = {

	io : undefined,
	TchatUsers : new Object(),

	init : function(io, cookie, KEY, store, session) {
		this.io = io;

		var that = this;

		this.io.set('authorization', function(data, accept) {
		  cookie(data, {}, function(err) {
		    if (!err) {
		      var sessionID = data.signedCookies[KEY];
		      store.get(sessionID, function(err, session) {
		      	session_brute = session;
		        if (err || !session) {
		          accept(null, false);
		        } else {
		          data.session = session;
		          accept(null, true);
		        }
		      });
		    } else {
		      accept(null, false);
		    }
		  });
		});

		this.io.sockets.on('connection', function (socket) {

		  	socket.on('new_user', function() {

		  		socket.session_user_id = session_brute.user_id;
		  		socket.pseudo = session_brute.pseudo;
		  		socket.friendsIdList = [];
		  		that.TchatUsers[socket.session_user_id] = socket;

		  		U.getFriendsList(socket.session_user_id, true, function(rows) {
					that.TchatUsers[socket.session_user_id].friendsIdList = rows;

					// on informe les amis de l'utilisateur de sa connection //
					// on ne selectionne que les sockets des amis //
					users_friends_co = [];
					for (var i = 0; i < rows.length; i++)
					{
						if (that.TchatUsers[rows[i].id] != undefined)
						{
							that.TchatUsers[rows[i].id].emit('friendHasConnected', {user : {id : socket.session_user_id, pseudo : socket.pseudo}});
							users_friends_co.push(rows[i].id);
						}
					}

					// ensuite il faut envoyer la liste de tous les amis connecté à l'utilisateur qui vient de se connnecter //
					that.TchatUsers[socket.session_user_id].emit('listFriendsConnected', {friends : users_friends_co});

		  		});

		  		console.log(socket.pseudo + ' has connected ...');
		  	});

		  	socket.on('disconnect', function() {

		  		// informer mes amis de ma déconnection //
		  		for (var i = 0; i < that.TchatUsers[socket.session_user_id].friendsIdList.length; i++)
		  		{
		  			if (that.TchatUsers[that.TchatUsers[socket.session_user_id].friendsIdList[i].id] != undefined)
					{
						that.TchatUsers[that.TchatUsers[socket.session_user_id].friendsIdList[i].id].emit('friendHasDisconnected', {user : {id : socket.session_user_id, pseudo : socket.pseudo}});
					}
		  		}
		  		
		  		console.log(socket.pseudo + ' has disconnected ...');
		  		delete that.TchatUsers[socket.session_user_id];
		  	});

		  	socket.on('isOverTyping', function(obj) {

		  		var id_user_to_speak = obj.id_user_to_speak;

		  		for (var i = 0; i < that.TchatUsers.length; i++)
		    	{
		    		if (that.TchatUsers[i].session_user_id == id_user_to_speak)
		    		{
		    			that.TchatUsers[i].emit('friendStopedTyping', {iduserFrom : socket.session_user_id, pseudo : socket.pseudo});
		    			break;
		    		}
		    	}
		  	});

		  	socket.on('isTyping', function(obj) {

		  		var id_user_to_speak = obj.id_user_to_speak;

		  		console.log("User " + socket.session_user_id + " is typing ... to " + id_user_to_speak);
		  		for (var i = 0; i < that.TchatUsers.length; i++)
		    	{
		    		if (that.TchatUsers[i].session_user_id == id_user_to_speak)
		    		{
		    			that.TchatUsers[i].emit('friendIsTyping', {iduserFrom : socket.session_user_id, pseudo : socket.pseudo});
		    			break;
		    		}
		    	}
		  	});

		    // TCHAT MESSAGE //
		    socket.on('message', function (message) {
		    	console.log(message.message);
		    	console.log("Id user vers lequel le message est envoyé" + message.id_user_to_speak);
		    	console.log("Id user de la personne emetrice" + socket.session_user_id);

		      	Tchat.insertMessage(socket.session_user_id, message.id_user_to_speak, message.message);
		      	that.TchatUsers[message.id_user_to_speak].emit('tchatMessage', {iduserFrom : socket.session_user_id, pseudo : socket.pseudo, message : message.message});
		    });

		    // SHARE SONG //
		    socket.on('ShareSong', function(data) {
		        console.log("id user receiver : " + data.receiver);
		        console.log("song id : " + data.song_id);
		        console.log("user id : " + socket.session_user_id);

		        Tchat.insertShareSongNotifications(socket.session_user_id, data.receiver, data.song_id);
		        that.TchatUsers[data.receiver].emit('proposeShareSong', {song_id : data.song_id});
		    });
		});
	},
};

module.exports = S;

